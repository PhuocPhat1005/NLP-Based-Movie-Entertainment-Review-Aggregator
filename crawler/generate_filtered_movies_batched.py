import os
import json
import time
import google.generativeai as genai

# C·∫•u h√¨nh API Key Gemini
GEMINI_API_KEY = "AIzaSyAMNpfuhJfwFw3lFv-Lu9FxeH9max1dAJA"  # <<< Thay b·∫±ng API Key Gemini Flash 2.0 c·ªßa b·∫°n

genai.configure(api_key=GEMINI_API_KEY)

def generate_batch(prompt, batch_name):
    model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")
    print(f"\n‚ö° Generating batch: {batch_name}")

    for attempt in range(3):
        try:
            response = model.generate_content(prompt)
            text = response.text

            start_idx = text.index('[')
            end_idx = text.rindex(']') + 1
            json_text = text[start_idx:end_idx]

            movie_list = json.loads(json_text)

            print(f"‚úÖ Batch {batch_name}: {len(movie_list)} movies generated.")
            return movie_list

        except Exception as e:
            print(f"‚ùå Error in batch {batch_name}, attempt {attempt+1}: {e}")
            time.sleep(2)

    print(f"üö® Failed batch {batch_name} after 3 attempts.")
    return []

def save_movies(movie_list, output_path):
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(movie_list, f, indent=4, ensure_ascii=False)
    print(f"\n‚úÖ Saved {len(movie_list)} movies to {output_path}")

if __name__ == "__main__":
    output_folder = "./output"
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    all_movies = []
    seen_names = set()

    prompts = {
        "movies_2020s": (
            "Li·ªát k√™ 250 b·ªô phim n·ªïi ti·∫øng ph√°t h√†nh t·ª´ nƒÉm 2000 ƒë·∫øn 2025, "
            "g·ªìm id (IMDb ID), name (t√™n phim), original_title (t√™n g·ªëc). "
            "ƒê·∫£m b·∫£o id (IMDb ID) ch√≠nh x√°c t·ª´ IMDb "
            "Kh√¥ng l·∫∑p l·∫°i phim. Ch·ªâ tr·∫£ JSON array thu·∫ßn. "
            "N·∫øu kh√¥ng c√≥ original_title ri√™ng, d√πng lu√¥n name."
            
        ),
        "classic_movies": (
            "Li·ªát k√™ 250 b·ªô phim kinh ƒëi·ªÉn n·ªïi ti·∫øng ph√°t h√†nh t·ª´ 1950 ƒë·∫øn 1999, "
            "g·ªìm id (IMDb ID), name (t√™n phim), original_title (t√™n g·ªëc). "
            "ƒê·∫£m b·∫£o id (IMDb ID) ch√≠nh x√°c t·ª´ IMDb "
            "Kh√¥ng l·∫∑p l·∫°i phim. Ch·ªâ tr·∫£ JSON array thu·∫ßn."
            "N·∫øu kh√¥ng c√≥ original_title ri√™ng, d√πng lu√¥n name."
            
        ),
        "oscar_movies": (
            "Li·ªát k√™ 250 b·ªô phim ƒë√£ t·ª´ng th·∫Øng ho·∫∑c ƒë∆∞·ª£c ƒë·ªÅ c·ª≠ Oscar Best Picture, "
            "g·ªìm id (IMDb ID), name (t√™n phim), original_title (t√™n g·ªëc). "
            "ƒê·∫£m b·∫£o id (IMDb ID) ch√≠nh x√°c t·ª´ IMDb "
            "Kh√¥ng l·∫∑p l·∫°i phim. Ch·ªâ tr·∫£ JSON array thu·∫ßn."
             "N·∫øu kh√¥ng c√≥ original_title ri√™ng, d√πng lu√¥n name."
            
        ),
        "asian_movies": (
            "Li·ªát k√™ 250 b·ªô phim n·ªïi ti·∫øng ƒë·∫øn t·ª´ ch√¢u √Å, "
            "g·ªìm id (IMDb ID), name (t√™n phim), original_title (t√™n g·ªëc). "
            "ƒê·∫£m b·∫£o id (IMDb ID) ch√≠nh x√°c t·ª´ IMDb "
            "Kh√¥ng l·∫∑p l·∫°i phim. Ch·ªâ tr·∫£ JSON array thu·∫ßn."
            "N·∫øu kh√¥ng c√≥ original_title ri√™ng, d√πng lu√¥n name."
           
        ),
        "indie_documentary": (
            "Li·ªát k√™ 250 b·ªô phim indie v√† phim t√†i li·ªáu n·ªïi ti·∫øng tr√™n to√†n th·∫ø gi·ªõi, "
            "g·ªìm id (IMDb ID), name (t√™n phim), original_title (t√™n g·ªëc). "
            "ƒê·∫£m b·∫£o id (IMDb ID) ch√≠nh x√°c t·ª´ IMDb"
            "Kh√¥ng l·∫∑p l·∫°i phim. Ch·ªâ tr·∫£ JSON array thu·∫ßn."
            "N·∫øu kh√¥ng c√≥ original_title ri√™ng, d√πng lu√¥n name."
            
        ),
        "action_scifi": (
            "Li·ªát k√™ 250 b·ªô phim h√†nh ƒë·ªông v√† khoa h·ªçc vi·ªÖn t∆∞·ªüng n·ªïi ti·∫øng m·ªçi th·ªùi ƒë·∫°i, "
            "g·ªìm id (IMDb ID), name (t√™n phim), original_title (t√™n g·ªëc). "
            "ƒê·∫£m b·∫£o id (IMDb ID) ch√≠nh x√°c t·ª´ IMDb  "
            "Kh√¥ng l·∫∑p l·∫°i phim. Ch·ªâ tr·∫£ JSON array thu·∫ßn."
            "N·∫øu kh√¥ng c√≥ original_title ri√™ng, d√πng lu√¥n name."
           
        )
    }

    for batch_name, prompt in prompts.items():
        batch_movies = generate_batch(prompt, batch_name)
        if batch_movies:
            for movie in batch_movies:
                name_key = movie['name'].strip().lower()
                if name_key not in seen_names:
                    seen_names.add(name_key)
                    all_movies.append(movie)
        time.sleep(2)  # ngh·ªâ nh·∫π gi·ªØa c√°c batch

    print(f"\nüöÄ Total unique movies collected: {len(all_movies)}")

    if all_movies:
        save_movies(all_movies, os.path.join(output_folder, "filtered_movies_advanced.json"))
    else:
        print("‚ùå No movies collected.")
